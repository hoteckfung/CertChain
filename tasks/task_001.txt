# Task ID: 1
# Title: Implement Authentication and Access Control
# Status: pending
# Dependencies: None
# Priority: high
# Description: Set up MetaMask wallet authentication and role-based access control for Admin, Issuer, and Holder. Public access for Verifier.
# Details:
Implement MetaMask integration for login. Use RBAC to restrict access to dashboards. Allow admins to modify user roles. Ensure verifiers can access verification without login. New users should self-register by connecting their wallet.

# Test Strategy:
Test login/logout with MetaMask. Attempt to access restricted pages with different roles. Test admin ability to change user roles. Confirm verifiers can access public verification.

# Subtasks:
## 1.1. Integrate MetaMask Wallet Connection [done]
### Dependencies: None
### Description: Enable users to connect their MetaMask wallet for authentication.
### Details:
Use Ethers.js to connect MetaMask. Store wallet address in session. Handle connection errors and user rejection. Allow new users to self-register by connecting their wallet.

## 1.2. Implement Role-Based Access Control (RBAC) [done]
### Dependencies: 1.1
### Description: Restrict access to dashboards based on user role (Admin, Issuer, Holder).
### Details:
Implement RBAC logic in both frontend and smart contract. Map wallet addresses to roles. Default new users to holder role.

## 1.3. Public Verifier Access (No Wallet) [done]
### Dependencies: None
### Description: Allow verifiers to access certificate verification without authentication.
### Details:
Create a public verification page accessible without login. Ensure no sensitive data is exposed.

## 1.4. Admin Role Management [done]
### Dependencies: 1.2
### Description: Allow admins to modify user roles (e.g., change holders to issuers).
### Details:
Create admin interface to view all users and change their roles. Update MySQL database and smart contract permissions when roles are changed.
